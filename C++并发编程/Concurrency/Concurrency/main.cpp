//
//  main.cpp
//  Concurrency
//
//  Created by Haitao on 20/12/17.
//  Copyright © 2017年 mess. All rights reserved.
//

/******************8.1.3 通过任务类型划分工作*************************/


/*分离关注
多线程下有两个危险需要分离关注。第一个是对错误担忧的分离，主要表现为线程间共享着
很多的数据，或者不同的线程要相互等待；这两种情况都是因为线程间很密切的交互。当这
种情况发生，就需要看一下为什么需要这么多交互。当所有交互都有关于同样的问题，就应
该使用单线程来解决，并将引用同一原因的线程提取出来。或者，当有两个线程需要频繁的
交流，且没有其他线程时，那么就可以将这两个线程合为一个线程。
当通过任务类型对线程间的任务进行划分时，不应该让线程处于完全隔离的状态。当多个输
入数据集需要使用同样的操作序列，可以将序列中的操作分成多个阶段，来让每个线程执
行。

划分任务序列
当任务会应用到相同操作序列，去处理独立的数据项时，就可以使用流水线(pipeline)系统进
行并发。这好比一个物理管道：数据流从管道一端进入，在进行一系列操作后，从管道另一
端出去。
使用这种方式划分工作，可以为流水线中的每一阶段操作创建一个独立线程。当一个操作完
成，数据元素会放在队列中，以供下一阶段的线程提取使用。这就允许第一个线程在完成对
于第一个数据块的操作，并要对第二个数据块进行操作时，第二个线程可以对第一个数据块
执行管线中的第二个操作。*/



/*****************************************************************/

#include "SortChunk.h"

int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, World!\n";
    return 0;
}
